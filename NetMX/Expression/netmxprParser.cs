//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 netmxpr.g 2012-03-23 06:57:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  NetMX.Expression 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class netmxprParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOS", "COMMA", "DIV", "DOT", "Digits", "EQUALS", "EQUAL_OBJ", "FunctionName", "GE", "LE", "LESS", "LPAR", "Literal", "MINUS", "MORE", "MUL", "NOT", "Number", "OR", "PLUS", "QUOT", "RPAR", "Whitespace"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int APOS=5;
	public const int COMMA=6;
	public const int DIV=7;
	public const int DOT=8;
	public const int Digits=9;
	public const int EQUALS=10;
	public const int EQUAL_OBJ=11;
	public const int FunctionName=12;
	public const int GE=13;
	public const int LE=14;
	public const int LESS=15;
	public const int LPAR=16;
	public const int Literal=17;
	public const int MINUS=18;
	public const int MORE=19;
	public const int MUL=20;
	public const int NOT=21;
	public const int Number=22;
	public const int OR=23;
	public const int PLUS=24;
	public const int QUOT=25;
	public const int RPAR=26;
	public const int Whitespace=27;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public netmxprParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public netmxprParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return netmxprParser.tokenNames; } }
	public override string GrammarFileName { get { return "netmxpr.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}
	// $ANTLR start "parse"
	// netmxpr.g:38:8: public parse : expr ;
	[GrammarRule("parse")]
	public AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expr1 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(38, 2);
		try
		{
			// netmxpr.g:38:15: ( expr )
			DebugEnterAlt(1);
			// netmxpr.g:38:18: expr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(38, 18);
			PushFollow(Follow._expr_in_parse269);
			expr1=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(39, 2);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}
	// $ANTLR start "expr"
	// netmxpr.g:41:1: expr : orExpr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<object, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 2);
		TraceIn("expr", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> orExpr2 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(41, 2);
		try
		{
			// netmxpr.g:41:7: ( orExpr )
			DebugEnterAlt(1);
			// netmxpr.g:41:10: orExpr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(41, 10);
			PushFollow(Follow._orExpr_in_expr282);
			orExpr2=orExpr();
			PopFollow();

			adaptor.AddChild(root_0, orExpr2.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 2);
			LeaveRule("expr", 2);
			LeaveRule_expr();
	    }
	 	DebugLocation(42, 2);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primaryExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primaryExpr() {}
	// $ANTLR start "primaryExpr"
	// netmxpr.g:44:1: primaryExpr : ( '(' ! expr ')' !| Literal | Number | functionCall );
	[GrammarRule("primaryExpr")]
	private AstParserRuleReturnScope<object, IToken> primaryExpr()
	{
		EnterRule_primaryExpr();
		EnterRule("primaryExpr", 3);
		TraceIn("primaryExpr", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal3 = default(IToken);
	    IToken char_literal5 = default(IToken);
	    IToken Literal6 = default(IToken);
	    IToken Number7 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expr4 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functionCall8 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal3_tree = default(object);
	    object char_literal5_tree = default(object);
	    object Literal6_tree = default(object);
	    object Number7_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primaryExpr");
		DebugLocation(44, 2);
		try
		{
			// netmxpr.g:45:3: ( '(' ! expr ')' !| Literal | Number | functionCall )
			int alt1=4;
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			switch (input.LA(1))
			{
			case LPAR:
				{
				alt1 = 1;
				}
				break;
			case Literal:
				{
				alt1 = 2;
				}
				break;
			case Number:
				{
				alt1 = 3;
				}
				break;
			case FunctionName:
				{
				alt1 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// netmxpr.g:45:6: '(' ! expr ')' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(45, 9);
				char_literal3=(IToken)Match(input,LPAR,Follow._LPAR_in_primaryExpr296); 
				DebugLocation(45, 11);
				PushFollow(Follow._expr_in_primaryExpr299);
				expr4=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr4.Tree);
				DebugLocation(45, 19);
				char_literal5=(IToken)Match(input,RPAR,Follow._RPAR_in_primaryExpr301); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// netmxpr.g:46:6: Literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(46, 6);
				Literal6=(IToken)Match(input,Literal,Follow._Literal_in_primaryExpr309); 
				Literal6_tree = (object)adaptor.Create(Literal6);
				adaptor.AddChild(root_0, Literal6_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// netmxpr.g:47:6: Number
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(47, 6);
				Number7=(IToken)Match(input,Number,Follow._Number_in_primaryExpr316); 
				Number7_tree = (object)adaptor.Create(Number7);
				adaptor.AddChild(root_0, Number7_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// netmxpr.g:48:6: functionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(48, 6);
				PushFollow(Follow._functionCall_in_primaryExpr325);
				functionCall8=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall8.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpr", 3);
			LeaveRule("primaryExpr", 3);
			LeaveRule_primaryExpr();
	    }
	 	DebugLocation(49, 2);
		} finally { DebugExitRule(GrammarFileName, "primaryExpr"); }
		return retval;

	}
	// $ANTLR end "primaryExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functionCall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functionCall() {}
	// $ANTLR start "functionCall"
	// netmxpr.g:51:1: functionCall : FunctionName ^ '(' ! expr ')' !;
	[GrammarRule("functionCall")]
	private AstParserRuleReturnScope<object, IToken> functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 4);
		TraceIn("functionCall", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FunctionName9 = default(IToken);
	    IToken char_literal10 = default(IToken);
	    IToken char_literal12 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expr11 = default(AstParserRuleReturnScope<object, IToken>);

	    object FunctionName9_tree = default(object);
	    object char_literal10_tree = default(object);
	    object char_literal12_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(51, 2);
		try
		{
			// netmxpr.g:52:3: ( FunctionName ^ '(' ! expr ')' !)
			DebugEnterAlt(1);
			// netmxpr.g:52:6: FunctionName ^ '(' ! expr ')' !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(52, 18);
			FunctionName9=(IToken)Match(input,FunctionName,Follow._FunctionName_in_functionCall339); 
			FunctionName9_tree = (object)adaptor.Create(FunctionName9);
			root_0 = (object)adaptor.BecomeRoot(FunctionName9_tree, root_0);

			DebugLocation(52, 23);
			char_literal10=(IToken)Match(input,LPAR,Follow._LPAR_in_functionCall342); 
			DebugLocation(52, 25);
			PushFollow(Follow._expr_in_functionCall345);
			expr11=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr11.Tree);
			DebugLocation(52, 33);
			char_literal12=(IToken)Match(input,RPAR,Follow._RPAR_in_functionCall347); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionCall", 4);
			LeaveRule("functionCall", 4);
			LeaveRule_functionCall();
	    }
	 	DebugLocation(53, 2);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orExpr() {}
	// $ANTLR start "orExpr"
	// netmxpr.g:55:1: orExpr : andExpr ( 'or' ^ andExpr )* ;
	[GrammarRule("orExpr")]
	private AstParserRuleReturnScope<object, IToken> orExpr()
	{
		EnterRule_orExpr();
		EnterRule("orExpr", 5);
		TraceIn("orExpr", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken string_literal14 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> andExpr13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> andExpr15 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal14_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "orExpr");
		DebugLocation(55, 2);
		try
		{
			// netmxpr.g:55:9: ( andExpr ( 'or' ^ andExpr )* )
			DebugEnterAlt(1);
			// netmxpr.g:55:12: andExpr ( 'or' ^ andExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(55, 12);
			PushFollow(Follow._andExpr_in_orExpr361);
			andExpr13=andExpr();
			PopFollow();

			adaptor.AddChild(root_0, andExpr13.Tree);
			DebugLocation(55, 20);
			// netmxpr.g:55:20: ( 'or' ^ andExpr )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_1 = input.LA(1);

				if ((LA2_1==OR))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:55:21: 'or' ^ andExpr
					{
					DebugLocation(55, 25);
					string_literal14=(IToken)Match(input,OR,Follow._OR_in_orExpr364); 
					string_literal14_tree = (object)adaptor.Create(string_literal14);
					root_0 = (object)adaptor.BecomeRoot(string_literal14_tree, root_0);

					DebugLocation(55, 27);
					PushFollow(Follow._andExpr_in_orExpr367);
					andExpr15=andExpr();
					PopFollow();

					adaptor.AddChild(root_0, andExpr15.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orExpr", 5);
			LeaveRule("orExpr", 5);
			LeaveRule_orExpr();
	    }
	 	DebugLocation(56, 2);
		} finally { DebugExitRule(GrammarFileName, "orExpr"); }
		return retval;

	}
	// $ANTLR end "orExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_andExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_andExpr() {}
	// $ANTLR start "andExpr"
	// netmxpr.g:58:1: andExpr : equalityExpr ( 'and' ^ equalityExpr )* ;
	[GrammarRule("andExpr")]
	private AstParserRuleReturnScope<object, IToken> andExpr()
	{
		EnterRule_andExpr();
		EnterRule("andExpr", 6);
		TraceIn("andExpr", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken string_literal17 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> equalityExpr16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> equalityExpr18 = default(AstParserRuleReturnScope<object, IToken>);

	    object string_literal17_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "andExpr");
		DebugLocation(58, 2);
		try
		{
			// netmxpr.g:58:10: ( equalityExpr ( 'and' ^ equalityExpr )* )
			DebugEnterAlt(1);
			// netmxpr.g:58:13: equalityExpr ( 'and' ^ equalityExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 13);
			PushFollow(Follow._equalityExpr_in_andExpr382);
			equalityExpr16=equalityExpr();
			PopFollow();

			adaptor.AddChild(root_0, equalityExpr16.Tree);
			DebugLocation(58, 26);
			// netmxpr.g:58:26: ( 'and' ^ equalityExpr )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==AND))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:58:27: 'and' ^ equalityExpr
					{
					DebugLocation(58, 32);
					string_literal17=(IToken)Match(input,AND,Follow._AND_in_andExpr385); 
					string_literal17_tree = (object)adaptor.Create(string_literal17);
					root_0 = (object)adaptor.BecomeRoot(string_literal17_tree, root_0);

					DebugLocation(58, 34);
					PushFollow(Follow._equalityExpr_in_andExpr388);
					equalityExpr18=equalityExpr();
					PopFollow();

					adaptor.AddChild(root_0, equalityExpr18.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpr", 6);
			LeaveRule("andExpr", 6);
			LeaveRule_andExpr();
	    }
	 	DebugLocation(59, 2);
		} finally { DebugExitRule(GrammarFileName, "andExpr"); }
		return retval;

	}
	// $ANTLR end "andExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_equalityExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_equalityExpr() {}
	// $ANTLR start "equalityExpr"
	// netmxpr.g:61:1: equalityExpr : relationalExpr ( ( '=' | 'eq' ) ^ relationalExpr )* ;
	[GrammarRule("equalityExpr")]
	private AstParserRuleReturnScope<object, IToken> equalityExpr()
	{
		EnterRule_equalityExpr();
		EnterRule("equalityExpr", 7);
		TraceIn("equalityExpr", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set20 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> relationalExpr19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> relationalExpr21 = default(AstParserRuleReturnScope<object, IToken>);

	    object set20_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "equalityExpr");
		DebugLocation(61, 2);
		try
		{
			// netmxpr.g:62:3: ( relationalExpr ( ( '=' | 'eq' ) ^ relationalExpr )* )
			DebugEnterAlt(1);
			// netmxpr.g:62:6: relationalExpr ( ( '=' | 'eq' ) ^ relationalExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(62, 6);
			PushFollow(Follow._relationalExpr_in_equalityExpr404);
			relationalExpr19=relationalExpr();
			PopFollow();

			adaptor.AddChild(root_0, relationalExpr19.Tree);
			DebugLocation(62, 21);
			// netmxpr.g:62:21: ( ( '=' | 'eq' ) ^ relationalExpr )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if (((LA4_1>=EQUALS && LA4_1<=EQUAL_OBJ)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:62:22: ( '=' | 'eq' ) ^ relationalExpr
					{
					DebugLocation(62, 32);

					set20=(IToken)input.LT(1);
					set20=(IToken)input.LT(1);
					if ((input.LA(1)>=EQUALS && input.LA(1)<=EQUAL_OBJ))
					{
						input.Consume();
						root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set20), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(62, 34);
					PushFollow(Follow._relationalExpr_in_equalityExpr414);
					relationalExpr21=relationalExpr();
					PopFollow();

					adaptor.AddChild(root_0, relationalExpr21.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpr", 7);
			LeaveRule("equalityExpr", 7);
			LeaveRule_equalityExpr();
	    }
	 	DebugLocation(63, 2);
		} finally { DebugExitRule(GrammarFileName, "equalityExpr"); }
		return retval;

	}
	// $ANTLR end "equalityExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relationalExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relationalExpr() {}
	// $ANTLR start "relationalExpr"
	// netmxpr.g:65:1: relationalExpr : additiveExpr ( ( '<' | '>' | '<=' | '>=' ) ^ additiveExpr )* ;
	[GrammarRule("relationalExpr")]
	private AstParserRuleReturnScope<object, IToken> relationalExpr()
	{
		EnterRule_relationalExpr();
		EnterRule("relationalExpr", 8);
		TraceIn("relationalExpr", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set23 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> additiveExpr22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> additiveExpr24 = default(AstParserRuleReturnScope<object, IToken>);

	    object set23_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "relationalExpr");
		DebugLocation(65, 2);
		try
		{
			// netmxpr.g:66:3: ( additiveExpr ( ( '<' | '>' | '<=' | '>=' ) ^ additiveExpr )* )
			DebugEnterAlt(1);
			// netmxpr.g:66:6: additiveExpr ( ( '<' | '>' | '<=' | '>=' ) ^ additiveExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(66, 6);
			PushFollow(Follow._additiveExpr_in_relationalExpr430);
			additiveExpr22=additiveExpr();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpr22.Tree);
			DebugLocation(66, 19);
			// netmxpr.g:66:19: ( ( '<' | '>' | '<=' | '>=' ) ^ additiveExpr )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if (((LA5_1>=GE && LA5_1<=LESS)||LA5_1==MORE))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:66:20: ( '<' | '>' | '<=' | '>=' ) ^ additiveExpr
					{
					DebugLocation(66, 39);

					set23=(IToken)input.LT(1);
					set23=(IToken)input.LT(1);
					if ((input.LA(1)>=GE && input.LA(1)<=LESS)||input.LA(1)==MORE)
					{
						input.Consume();
						root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set23), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(66, 41);
					PushFollow(Follow._additiveExpr_in_relationalExpr444);
					additiveExpr24=additiveExpr();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpr24.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpr", 8);
			LeaveRule("relationalExpr", 8);
			LeaveRule_relationalExpr();
	    }
	 	DebugLocation(67, 2);
		} finally { DebugExitRule(GrammarFileName, "relationalExpr"); }
		return retval;

	}
	// $ANTLR end "relationalExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_additiveExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_additiveExpr() {}
	// $ANTLR start "additiveExpr"
	// netmxpr.g:69:1: additiveExpr : multiplicativeExpr ( ( '+' | '-' ) ^ multiplicativeExpr )* ;
	[GrammarRule("additiveExpr")]
	private AstParserRuleReturnScope<object, IToken> additiveExpr()
	{
		EnterRule_additiveExpr();
		EnterRule("additiveExpr", 9);
		TraceIn("additiveExpr", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set26 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> multiplicativeExpr25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> multiplicativeExpr27 = default(AstParserRuleReturnScope<object, IToken>);

	    object set26_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "additiveExpr");
		DebugLocation(69, 2);
		try
		{
			// netmxpr.g:70:3: ( multiplicativeExpr ( ( '+' | '-' ) ^ multiplicativeExpr )* )
			DebugEnterAlt(1);
			// netmxpr.g:70:6: multiplicativeExpr ( ( '+' | '-' ) ^ multiplicativeExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(70, 6);
			PushFollow(Follow._multiplicativeExpr_in_additiveExpr460);
			multiplicativeExpr25=multiplicativeExpr();
			PopFollow();

			adaptor.AddChild(root_0, multiplicativeExpr25.Tree);
			DebugLocation(70, 25);
			// netmxpr.g:70:25: ( ( '+' | '-' ) ^ multiplicativeExpr )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_1 = input.LA(1);

				if ((LA6_1==MINUS||LA6_1==PLUS))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:70:26: ( '+' | '-' ) ^ multiplicativeExpr
					{
					DebugLocation(70, 35);

					set26=(IToken)input.LT(1);
					set26=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set26), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(70, 37);
					PushFollow(Follow._multiplicativeExpr_in_additiveExpr470);
					multiplicativeExpr27=multiplicativeExpr();
					PopFollow();

					adaptor.AddChild(root_0, multiplicativeExpr27.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpr", 9);
			LeaveRule("additiveExpr", 9);
			LeaveRule_additiveExpr();
	    }
	 	DebugLocation(71, 2);
		} finally { DebugExitRule(GrammarFileName, "additiveExpr"); }
		return retval;

	}
	// $ANTLR end "additiveExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_multiplicativeExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_multiplicativeExpr() {}
	// $ANTLR start "multiplicativeExpr"
	// netmxpr.g:73:1: multiplicativeExpr : unaryExpr ( ( '*' | '/' ) ^ unaryExpr )* ;
	[GrammarRule("multiplicativeExpr")]
	private AstParserRuleReturnScope<object, IToken> multiplicativeExpr()
	{
		EnterRule_multiplicativeExpr();
		EnterRule("multiplicativeExpr", 10);
		TraceIn("multiplicativeExpr", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set29 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> unaryExpr28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> unaryExpr30 = default(AstParserRuleReturnScope<object, IToken>);

	    object set29_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpr");
		DebugLocation(73, 2);
		try
		{
			// netmxpr.g:74:3: ( unaryExpr ( ( '*' | '/' ) ^ unaryExpr )* )
			DebugEnterAlt(1);
			// netmxpr.g:74:6: unaryExpr ( ( '*' | '/' ) ^ unaryExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(74, 6);
			PushFollow(Follow._unaryExpr_in_multiplicativeExpr486);
			unaryExpr28=unaryExpr();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpr28.Tree);
			DebugLocation(74, 16);
			// netmxpr.g:74:16: ( ( '*' | '/' ) ^ unaryExpr )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_1 = input.LA(1);

				if ((LA7_1==DIV||LA7_1==MUL))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:74:17: ( '*' | '/' ) ^ unaryExpr
					{
					DebugLocation(74, 26);

					set29=(IToken)input.LT(1);
					set29=(IToken)input.LT(1);
					if (input.LA(1)==DIV||input.LA(1)==MUL)
					{
						input.Consume();
						root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set29), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(74, 28);
					PushFollow(Follow._unaryExpr_in_multiplicativeExpr496);
					unaryExpr30=unaryExpr();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpr30.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpr", 10);
			LeaveRule("multiplicativeExpr", 10);
			LeaveRule_multiplicativeExpr();
	    }
	 	DebugLocation(75, 2);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpr"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unaryExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unaryExpr() {}
	// $ANTLR start "unaryExpr"
	// netmxpr.g:77:1: unaryExpr : ( '~' )* primaryExpr ;
	[GrammarRule("unaryExpr")]
	private AstParserRuleReturnScope<object, IToken> unaryExpr()
	{
		EnterRule_unaryExpr();
		EnterRule("unaryExpr", 11);
		TraceIn("unaryExpr", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal31 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> primaryExpr32 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal31_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unaryExpr");
		DebugLocation(77, 2);
		try
		{
			// netmxpr.g:78:3: ( ( '~' )* primaryExpr )
			DebugEnterAlt(1);
			// netmxpr.g:78:6: ( '~' )* primaryExpr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(78, 6);
			// netmxpr.g:78:6: ( '~' )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_1 = input.LA(1);

				if ((LA8_1==NOT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// netmxpr.g:78:6: '~'
					{
					DebugLocation(78, 6);
					char_literal31=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpr512); 
					char_literal31_tree = (object)adaptor.Create(char_literal31);
					adaptor.AddChild(root_0, char_literal31_tree);


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(78, 11);
			PushFollow(Follow._primaryExpr_in_unaryExpr515);
			primaryExpr32=primaryExpr();
			PopFollow();

			adaptor.AddChild(root_0, primaryExpr32.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpr", 11);
			LeaveRule("unaryExpr", 11);
			LeaveRule_unaryExpr();
	    }
	 	DebugLocation(79, 2);
		} finally { DebugExitRule(GrammarFileName, "unaryExpr"); }
		return retval;

	}
	// $ANTLR end "unaryExpr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _expr_in_parse269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orExpr_in_expr282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAR_in_primaryExpr296 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _expr_in_primaryExpr299 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _RPAR_in_primaryExpr301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Literal_in_primaryExpr309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Number_in_primaryExpr316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_primaryExpr325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FunctionName_in_functionCall339 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _LPAR_in_functionCall342 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _expr_in_functionCall345 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _RPAR_in_functionCall347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpr_in_orExpr361 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _OR_in_orExpr364 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _andExpr_in_orExpr367 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _equalityExpr_in_andExpr382 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpr385 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _equalityExpr_in_andExpr388 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _relationalExpr_in_equalityExpr404 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _set_in_equalityExpr407 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _relationalExpr_in_equalityExpr414 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _additiveExpr_in_relationalExpr430 = new BitSet(new ulong[]{0x8E002UL});
		public static readonly BitSet _set_in_relationalExpr433 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _additiveExpr_in_relationalExpr444 = new BitSet(new ulong[]{0x8E002UL});
		public static readonly BitSet _multiplicativeExpr_in_additiveExpr460 = new BitSet(new ulong[]{0x1040002UL});
		public static readonly BitSet _set_in_additiveExpr463 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _multiplicativeExpr_in_additiveExpr470 = new BitSet(new ulong[]{0x1040002UL});
		public static readonly BitSet _unaryExpr_in_multiplicativeExpr486 = new BitSet(new ulong[]{0x100082UL});
		public static readonly BitSet _set_in_multiplicativeExpr489 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _unaryExpr_in_multiplicativeExpr496 = new BitSet(new ulong[]{0x100082UL});
		public static readonly BitSet _NOT_in_unaryExpr512 = new BitSet(new ulong[]{0x631000UL});
		public static readonly BitSet _primaryExpr_in_unaryExpr515 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  NetMX.Expression 
